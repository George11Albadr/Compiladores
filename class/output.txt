stage: scanning
Token: class en la línea 1, columna 1
Token: Program en la línea 1, columna 8
Token: { en la línea 1, columna 17
Token: boolean en la línea 3, columna 9
Token: entrada en la línea 3, columna 18
Token: ; en la línea 3, columna 25
Token: int en la línea 5, columna 9
Token: numeros en la línea 5, columna 14
Token: ; en la línea 5, columna 21
Token: int en la línea 9, columna 9
Token: suma en la línea 9, columna 14
Token: ( en la línea 9, columna 18
Token: int en la línea 9, columna 19
Token: valor1 en la línea 9, columna 24
Token: , en la línea 9, columna 30
Token: int en la línea 9, columna 33
Token: valor2 en la línea 9, columna 38
Token: ) en la línea 9, columna 44
Token: { en la línea 9, columna 45
Token: int en la línea 11, columna 17
Token: res en la línea 11, columna 22
Token: ; en la línea 11, columna 25
Token: res en la línea 13, columna 17
Token: = en la línea 13, columna 22
Token: valor1 en la línea 13, columna 25
Token: + en la línea 13, columna 33
Token: valor2 en la línea 13, columna 36
Token: ; en la línea 13, columna 42
Token: return en la línea 15, columna 17
Token: res en la línea 15, columna 25
Token: ; en la línea 15, columna 28
Token: } en la línea 17, columna 9
Token: void en la línea 19, columna 9
Token: main en la línea 19, columna 15
Token: ( en la línea 19, columna 19
Token: ) en la línea 19, columna 20
Token: { en la línea 19, columna 21
Token: int en la línea 21, columna 17
Token: resultado1 en la línea 21, columna 22
Token: , en la línea 21, columna 32
Token: resultado2 en la línea 21, columna 35
Token: ; en la línea 21, columna 45
Token: boolean en la línea 23, columna 17
Token: resultado3 en la línea 23, columna 26
Token: ; en la línea 23, columna 36
Token: entrada en la línea 25, columna 17
Token: = en la línea 25, columna 26
Token: true en la línea 25, columna 29
Token: ; en la línea 25, columna 33
Token: if en la línea 29, columna 17
Token: ( en la línea 29, columna 21
Token: entrada en la línea 29, columna 22
Token: == en la línea 29, columna 31
Token: true en la línea 29, columna 35
Token: ) en la línea 29, columna 39
Token: { en la línea 29, columna 40
Token: resultado1 en la línea 31, columna 25
Token: = en la línea 31, columna 37
Token: suma en la línea 31, columna 40
Token: ( en la línea 31, columna 44
Token: 3 en la línea 31, columna 45
Token: , en la línea 31, columna 46
Token: 2 en la línea 31, columna 47
Token: ) en la línea 31, columna 48
Token: ; en la línea 31, columna 49
Token: } en la línea 33, columna 17
Token: entrada en la línea 35, columna 17
Token: = en la línea 35, columna 26
Token: false en la línea 35, columna 29
Token: ; en la línea 35, columna 34
Token: if en la línea 37, columna 17
Token: ( en la línea 37, columna 21
Token: entrada en la línea 37, columna 22
Token: == en la línea 37, columna 31
Token: true en la línea 37, columna 35
Token: ) en la línea 37, columna 39
Token: { en la línea 37, columna 40
Token: resultado1 en la línea 39, columna 25
Token: = en la línea 39, columna 37
Token: resta en la línea 39, columna 40
Token: ( en la línea 39, columna 45
Token: 3 en la línea 39, columna 46
Token: , en la línea 39, columna 47
Token: 2 en la línea 39, columna 48
Token: ) en la línea 39, columna 49
Token: ; en la línea 39, columna 50
Token: } en la línea 41, columna 17
Token: } en la línea 45, columna 9
Token: } en la línea 47, columna 1
Token: @ en la línea 51, columna 1
