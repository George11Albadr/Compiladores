package compiler.parser;

import java_cup.runtime.*;
import compiler.scanner.Scanner;
import java.io.FileReader;
import java.io.IOException;

parser code {:
    public Symbol parse(String filename) throws Exception {
        Scanner scanner = new Scanner(new FileReader(filename));
        return this.parse();
    }

    public void syntax_error(Symbol s) {
        System.err.println("Syntax error at line " + s.left + ", column " + s.right);
    }
:};

/* Terminals (tokens returned by the scanner) */
terminal CLASS, INT, VOID, BOOLEAN, TRUE, FALSE, IF, RETURN;
terminal ASSIGN, EQ, SEMI, LBRACE, RBRACE, LPAREN, RPAREN, PLUS, MINUS, COMMA;
terminal String ID;
terminal Integer INT_LITERAL;

/* Non-terminals */
non terminal program, class_decl, method_decl, var_decl, type;
non terminal statement, expr, param_list, statement_list, arg_list;

/* Precedences */
precedence left PLUS, MINUS;
precedence left EQ;
precedence right ASSIGN;

/* The grammar rules */
start with program;

program ::= class_decl
          ;

class_decl ::= CLASS ID:name LBRACE method_decl RBRACE 
             ;

method_decl ::= type ID:name LPAREN param_list RPAREN LBRACE var_decl statement_list RBRACE 
              ;

param_list ::= param_list COMMA type ID:name 
             | type ID:name
             |
             ;

var_decl ::= type ID:name SEMI
           ;

type ::= INT
       | BOOLEAN
       | VOID
       ;

statement_list ::= statement_list statement
                 | statement
                 ;

statement ::= IF LPAREN expr RPAREN statement
            | ID:name ASSIGN expr SEMI
            | RETURN expr SEMI
            ;

expr ::= expr:e1 PLUS expr:e2
       | expr:e1 MINUS expr:e2
       | expr:e1 EQ expr:e2
       | ID:name
       | INT_LITERAL:i
       | TRUE
       | FALSE
       | ID:name LPAREN arg_list RPAREN
       ;

arg_list ::= arg_list COMMA expr
           | expr
           |
           ;